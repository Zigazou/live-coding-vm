-- Setup prompt for multiline command
:set -XFlexibleInstances
:set -XOverloadedStrings
:set prompt      "Haskell> "
:set prompt-cont "........ "
:set +m

-- Preload libraries
import Control.Monad
import Data.Char
import Data.List
import qualified Data.Text as T
import qualified Data.ByteString as BS
import Data.Text.ICU
import Data.Text.ICU.Char
import Data.Text.Encoding
import Formatting

:{
icuCharCount :: T.Text -> Int
icuCharCount = length . breaks charBreak
    where charBreak = breakCharacter (Locale "fr_FR")

icuWordsFR :: T.Text -> [T.Text]
icuWordsFR = fmap brkBreak . filter onlyWord . breaks wordBreak
    where
        wordBreak = breakWord (Locale "fr_FR")
        onlyWord brk = brkStatus brk == Letter

icuWordsJP :: T.Text -> [T.Text]
icuWordsJP = fmap brkBreak . filter onlyWord . breaks wordBreak
    where
        wordBreak = breakWord (Locale "ja_JP")
        onlyWord brk = brkStatus brk == Ideograph

class DirectPrint t where
    dPrint :: t -> IO ()

instance DirectPrint T.Text where
    dPrint t = putStrLn (T.unpack t)

instance DirectPrint [T.Text] where
    dPrint = mapM_ dPrint

showCharCount :: T.Text -> IO ()
showCharCount s = do
    let
        charCount = icuCharCount s
        byteCount = (BS.length . encodeUtf8) s
        codePointCount = T.length s
    fprint ( "String = " % stext % "\n"
           % "   Characters   = " % int % "\n"
           % "   Code points  = " % int % "\n"
           % "   Bytes (UTF8) = " % int % "\n"
           )
           s charCount codePointCount byteCount

zalgoCES :: T.Text
zalgoCES = "C̸̼̒o̸̭͆d̴̞́e̷̩͋u̶̢͠ŕ̵̪s̸̲̎ ̴̦̏e̵̥̚n̷̲̅ ̶̦́S̷̩̓ë̶̼́ì̵̯n̶̞̑ẻ̴͈"

unicodeExamples :: [T.Text]
unicodeExamples =
    [ "Codeurs en Seine"
    , "\x1F440\x1F443"
    , "\x1F440\x200D\x1F443"
    , "a\x200Dz"
    , "\x1F476\x1F3FF"
    , "🧑🏿"
    , "🧑"
    ]

factorial :: Integer -> Integer
factorial n = product [1..n]
:}